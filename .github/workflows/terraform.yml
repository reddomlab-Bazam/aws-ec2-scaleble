# .github/workflows/terraform.yml

name: 'Terraform CI/CD'

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod

env:
  TF_CLOUD_ORGANIZATION: "your-org-name"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE_DEV: "cortex-emr-dev"
  TF_WORKSPACE_PROD: "cortex-emr-prod"

jobs:
  terraform-check:
    name: 'Terraform Format and Validate'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive

    - name: Terraform Init (Dev)
      run: |
        cd environments/dev
        terraform init

    - name: Terraform Validate (Dev)
      run: |
        cd environments/dev
        terraform validate

    - name: Terraform Init (Prod)
      run: |
        cd environments/prod
        terraform init

    - name: Terraform Validate (Prod)
      run: |
        cd environments/prod
        terraform validate

  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    needs: terraform-check
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run Checkov
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform
        output_format: sarif
        output_file_path: reports/results.sarif
        download_external_modules: true
        
    - name: Upload Checkov results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: reports/results.sarif

    - name: Run TFSec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        working_directory: '.'
        
  plan-dev:
    name: 'Plan Development'
    runs-on: ubuntu-latest
    needs: [terraform-check, security-scan]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'dev'
    environment: development
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Init
      run: |
        cd environments/dev
        terraform init

    - name: Terraform Plan
      run: |
        cd environments/dev
        terraform plan -no-color
      continue-on-error: true

    - name: Comment PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform
          ${{ steps.plan.outputs.stdout }}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  apply-dev:
    name: 'Apply Development'
    runs-on: ubuntu-latest
    needs: plan-dev
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'dev'
    environment: development
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Init
      run: |
        cd environments/dev
        terraform init

    - name: Terraform Apply
      run: |
        cd environments/dev
        terraform apply -auto-approve

    - name: Get Outputs
      id: outputs
      run: |
        cd environments/dev
        echo "load_balancer_dns=$(terraform output -raw load_balancer_dns_name)" >> $GITHUB_OUTPUT
        echo "bastion_ip=$(terraform output -raw bastion_host_public_ip)" >> $GITHUB_OUTPUT

    - name: Comment Success
      uses: actions/github-script@v7
      if: success()
      with:
        script: |
          const output = `#### ‚úÖ Development Environment Deployed Successfully!
          
          **Load Balancer DNS:** ${{ steps.outputs.outputs.load_balancer_dns }}
          **Bastion Host IP:** ${{ steps.outputs.outputs.bastion_ip }}
          
          *Deployment Time: ${{ github.event.head_commit.timestamp }}*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  plan-prod:
    name: 'Plan Production'
    runs-on: ubuntu-latest
    needs: [terraform-check, security-scan]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'prod'
    environment: production-plan
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Init
      run: |
        cd environments/prod
        terraform init

    - name: Terraform Plan
      run: |
        cd environments/prod
        terraform plan -no-color

    - name: Save Plan
      run: |
        cd environments/prod
        terraform plan -out=tfplan

    - name: Upload Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: environments/prod/tfplan

  apply-prod:
    name: 'Apply Production'
    runs-on: ubuntu-latest
    needs: plan-prod
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'prod'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Download Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan
        path: environments/prod

    - name: Terraform Init
      run: |
        cd environments/prod
        terraform init

    - name: Terraform Apply
      run: |
        cd environments/prod
        terraform apply tfplan

    - name: Get Outputs
      id: outputs
      run: |
        cd environments/prod
        echo "load_balancer_dns=$(terraform output -raw load_balancer_dns_name)" >> $GITHUB_OUTPUT
        echo "bastion_ip=$(terraform output -raw bastion_host_public_ip)" >> $GITHUB_OUTPUT
        echo "dashboard_url=$(terraform output -raw dashboard_url)" >> $GITHUB_OUTPUT

    - name: Notify Success
      uses: actions/github-script@v7
      if: success()
      with:
        script: |
          const output = `#### üöÄ Production Environment Deployed Successfully!
          
          **Application URL:** https://${{ steps.outputs.outputs.load_balancer_dns }}
          **Bastion Host IP:** ${{ steps.outputs.outputs.bastion_ip }}
          **Monitoring Dashboard:** ${{ steps.outputs.outputs.dashboard_url }}
          
          **Deployment Details:**
          - Environment: Production
          - Branch: ${{ github.ref }}
          - Commit: ${{ github.sha }}
          - Actor: @${{ github.actor }}
          - Time: ${{ github.event.head_commit.timestamp }}
          
          ‚ö†Ô∏è **Post-Deployment Steps:**
          1. Verify application health at the load balancer URL
          2. Check monitoring dashboard for system metrics
          3. Test database connectivity
          4. Validate file system access
          5. Confirm backup schedules are running`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Notify Teams
      if: success()
      run: |
        curl -H "Content-Type: application/json" -d '{
          "text": "üöÄ Cortex EMR Production Deployment Successful!\n\nApplication URL: https://${{ steps.outputs.outputs.load_balancer_dns }}\nCommit: ${{ github.sha }}\nDeployed by: ${{ github.actor }}"
        }' ${{ secrets.TEAMS_WEBHOOK_URL }}

  destroy-dev:
    name: 'Destroy Development'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'destroy-dev'
    environment: development-destroy
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Init
      run: |
        cd environments/dev
        terraform init

    - name: Terraform Destroy
      run: |
        cd environments/dev
        terraform destroy -auto-approve

---

# .github/workflows/pr-validation.yml

name: 'Pull Request Validation'

on:
  pull_request:
    branches: [ "main", "develop" ]
    types: [opened, synchronize, reopened]

jobs:
  validate:
    name: 'Validate Changes'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Get Changed Files
      id: changed-files
      uses: tj-actions/changed-files@v42
      with:
        files: |
          **/*.tf
          **/*.tfvars

    - name: List Changed Files
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        echo "Changed files:"
        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          echo "$file"
        done

    - name: Terraform Format Check
      if: steps.changed-files.outputs.any_changed == 'true'
      run: terraform fmt -check -diff -recursive

    - name: Validate All Environments
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        for env in dev prod; do
          echo "Validating $env environment..."
          cd environments/$env
          terraform init -backend=false
          terraform validate
          cd ../..
        done

    - name: Run TFLint
      if: steps.changed-files.outputs.any_changed == 'true'
      uses: terraform-linters/setup-tflint@v4
      with:
        tflint_version: latest

    - name: TFLint Check
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        tflint --init
        tflint --recursive

    - name: Estimate Costs
      if: steps.changed-files.outputs.any_changed == 'true'
      uses: infracost/actions/setup@v2
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}

    - name: Generate Cost Estimate
      if: steps.changed-files.outputs.any_changed == 'true'
      run: |
        infracost breakdown --path=environments/prod \
          --format=json \
          --out-file=/tmp/infracost.json
        
        infracost comment github --path=/tmp/infracost.json \
          --repo=$GITHUB_REPOSITORY \
          --github-token=${{ secrets.GITHUB_TOKEN }} \
          --pull-request=${{ github.event.pull_request.number }} \
          --behavior=update

---

# .github/workflows/scheduled-checks.yml

name: 'Scheduled Infrastructure Checks'

on:
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM
  workflow_dispatch:

jobs:
  drift-detection:
    name: 'Terraform Drift Detection'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, prod]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Init
      run: |
        cd environments/${{ matrix.environment }}
        terraform init

    - name: Terraform Plan (Drift Check)
      id: plan
      run: |
        cd environments/${{ matrix.environment }}
        terraform plan -detailed-exitcode -no-color
      continue-on-error: true

    - name: Report Drift
      if: steps.plan.outputs.exitcode == 2
      uses: actions/github-script@v7
      with:
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üö® Infrastructure Drift Detected - ${{ matrix.environment }}`,
            body: `Infrastructure drift has been detected in the **${{ matrix.environment }}** environment.
            
            Please review the changes and apply them if they are expected, or investigate if they are unexpected.
            
            **Environment:** ${{ matrix.environment }}
            **Detection Time:** ${new Date().toISOString()}
            **Workflow:** ${context.workflow}
            
            To resolve this:
            1. Review the terraform plan output
            2. Apply changes if expected: \`terraform apply\`
            3. Investigate and revert if unexpected
            `,
            labels: ['infrastructure', 'drift', '${{ matrix.environment }}']
          });

  security-compliance:
    name: 'Security Compliance Check'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform
        output_format: json
        output_file_path: compliance-report.json

    - name: Upload Compliance Report
      uses: actions/upload-artifact@v4
      with:
        name: compliance-report
        path: compliance-report.json

  cost-monitoring:
    name: 'Cost Monitoring'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Infracost
      uses: infracost/actions/setup@v2
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}

    - name: Generate Cost Report
      run: |
        infracost breakdown --path=environments/prod \
          --format=table > cost-report.txt
        
        echo "## Monthly Cost Estimate" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat cost-report.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY